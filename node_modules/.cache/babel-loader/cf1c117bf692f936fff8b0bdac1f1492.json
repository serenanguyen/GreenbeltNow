{"ast":null,"code":"import _slicedToArray from \"/Users/serena.nguyen/Sites-1/GreenbeltNow/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/serena.nguyen/Sites-1/GreenbeltNow/src/components/Weather.js\";\nimport React, { useEffect, useState } from \"react\";\n\nconst Weather = () => {\n  const _useState = useState(),\n        _useState2 = _slicedToArray(_useState, 2),\n        data = _useState2[0],\n        setData = _useState2[1]; // passing empty array as second arg treats this similarly to componentDidMount\n\n\n  const callBackendAPI = async () => {\n    const response = await fetch(\"/weather\");\n    const body = await response.json();\n\n    if (response.status !== 200) {\n      throw Error(body.message);\n    }\n\n    return body;\n  };\n\n  useEffect(() => {\n    callBackendAPI().then(res => {\n      const response = res.response;\n      setData({\n        temp: response.main.temp,\n        condition: response.weather[0].description,\n        img: response.weather[0].icon\n      });\n    }).catch(err => console.log(err));\n  }, []);\n  const imgUrl = data && \"http://openweathermap.org/img/wn/\".concat(data.img, \"@2x.png\");\n  return React.createElement(\"div\", {\n    className: \"weather\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33\n    },\n    __self: this\n  }, React.createElement(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34\n    },\n    __self: this\n  }, \"Current Weather in Austin, TX\"), React.createElement(\"div\", {\n    className: \"weather-info\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35\n    },\n    __self: this\n  }, React.createElement(\"img\", {\n    src: imgUrl,\n    className: \"weather-icon\",\n    alt: \"weather-icon\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36\n    },\n    __self: this\n  }), React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37\n    },\n    __self: this\n  }, data && data.temp, \" F\")));\n};\n\nexport default Weather;","map":{"version":3,"sources":["/Users/serena.nguyen/Sites-1/GreenbeltNow/src/components/Weather.js"],"names":["React","useEffect","useState","Weather","data","setData","callBackendAPI","response","fetch","body","json","status","Error","message","then","res","temp","main","condition","weather","description","img","icon","catch","err","console","log","imgUrl"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;;AAEA,MAAMC,OAAO,GAAG,MAAM;AAAA,oBACID,QAAQ,EADZ;AAAA;AAAA,QACbE,IADa;AAAA,QACPC,OADO,kBAEpB;;;AAEA,QAAMC,cAAc,GAAG,YAAY;AACjC,UAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,UAAD,CAA5B;AACA,UAAMC,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAAnB;;AAEA,QAAIH,QAAQ,CAACI,MAAT,KAAoB,GAAxB,EAA6B;AAC3B,YAAMC,KAAK,CAACH,IAAI,CAACI,OAAN,CAAX;AACD;;AACD,WAAOJ,IAAP;AACD,GARD;;AAUAR,EAAAA,SAAS,CAAC,MAAM;AACdK,IAAAA,cAAc,GACXQ,IADH,CACQC,GAAG,IAAI;AACX,YAAMR,QAAQ,GAAGQ,GAAG,CAACR,QAArB;AACAF,MAAAA,OAAO,CAAC;AACRW,QAAAA,IAAI,EAAET,QAAQ,CAACU,IAAT,CAAcD,IADZ;AAERE,QAAAA,SAAS,EAAEX,QAAQ,CAACY,OAAT,CAAiB,CAAjB,EAAoBC,WAFvB;AAGRC,QAAAA,GAAG,EAAEd,QAAQ,CAACY,OAAT,CAAiB,CAAjB,EAAoBG;AAHjB,OAAD,CAAP;AAKD,KARH,EASGC,KATH,CASSC,GAAG,IAAIC,OAAO,CAACC,GAAR,CAAYF,GAAZ,CAThB;AAUD,GAXQ,EAWN,EAXM,CAAT;AAaA,QAAMG,MAAM,GAAGvB,IAAI,+CAAwCA,IAAI,CAACiB,GAA7C,YAAnB;AAEA,SACE;AAAK,IAAA,SAAS,EAAC,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qCADF,EAEE;AAAK,IAAA,SAAS,EAAC,cAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAK,IAAA,GAAG,EAAEM,MAAV;AAAkB,IAAA,SAAS,EAAC,cAA5B;AAA2C,IAAA,GAAG,EAAC,cAA/C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAIvB,IAAI,IAAIA,IAAI,CAACY,IAAjB,OAFF,CAFF,CADF;AASD,CAtCD;;AAwCA,eAAeb,OAAf","sourcesContent":["import React, { useEffect, useState } from \"react\";\n\nconst Weather = () => {\n  const [data, setData] = useState();\n  // passing empty array as second arg treats this similarly to componentDidMount\n\n  const callBackendAPI = async () => {\n    const response = await fetch(\"/weather\");\n    const body = await response.json();\n\n    if (response.status !== 200) {\n      throw Error(body.message);\n    }\n    return body;\n  };\n\n  useEffect(() => {\n    callBackendAPI()\n      .then(res => {\n        const response = res.response;\n        setData({\n        temp: response.main.temp,\n        condition: response.weather[0].description,\n        img: response.weather[0].icon\n      });\n      })\n      .catch(err => console.log(err));\n  }, []);\n\n  const imgUrl = data && `http://openweathermap.org/img/wn/${data.img}@2x.png`;\n\n  return (\n    <div className=\"weather\">\n      <h2>Current Weather in Austin, TX</h2>\n      <div className=\"weather-info\">\n        <img src={imgUrl} className=\"weather-icon\" alt=\"weather-icon\" />\n        <p>{data && data.temp} F</p>\n      </div>\n    </div>\n  );\n};\n\nexport default Weather;\n"]},"metadata":{},"sourceType":"module"}