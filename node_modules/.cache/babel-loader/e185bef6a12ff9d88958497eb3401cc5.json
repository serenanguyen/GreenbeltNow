{"ast":null,"code":"import axios from \"axios\";\nimport { locations, gaugeLocations } from \"./staticData\";\nconst helpers = {\n  runQuery(locationID) {\n    return axios.get(\"https://waterservices.usgs.gov/nwis/iv/\", {\n      params: {\n        site: locationID,\n        format: \"json\",\n        parameterCd: \"00065,00060\",\n        siteStatus: \"active\"\n      }\n    });\n  },\n\n  getWaterData(locationName) {\n    const locationID = locations[locationName].locationID;\n    const waterData = {};\n    return this.runQuery(locationID).then(response => {\n      if (response.status !== 200) {\n        throw new Error(\"request failed\");\n      }\n\n      waterData.location = locations[locationName]; // gauge reference\n\n      const gaugeID = gaugeLocations[locationID];\n      waterData.gaugeReference = \"Water data is being pulled from the gauge locatated at \".concat(locations[gaugeID].name, \".\");\n      const dataPoints = response.data.value.timeSeries;\n      dataPoints.forEach(data => {\n        const dataType = data.variable.variableDescription;\n        const value = data.values[0].value[0].value;\n\n        if (dataType.includes(\"Discharge\")) {\n          waterData.discharge = value;\n\n          if (value < 100) {\n            waterData.flowCondition = \"Water flow might be too slow.\";\n          } else if (value > 550) {\n            waterData.flowCondition = \"The water is moving a lil too fast, maybe take a nap instead\";\n          } else {\n            waterData.flowCondition = \"Water flow is pretty good!\";\n          }\n        } else {\n          // we can assume dataType = Gage height, ft\n          waterData.waterLevel = value;\n\n          if (value < 2) {\n            waterData.levelCondition = \"Water level might be too low.\";\n          } else if (value > 7) {\n            waterData.levelCondition = \"Water level might be too high today.\";\n          } else {\n            waterData.levelCondition = \"Water level is good!\";\n          }\n        }\n      });\n      return waterData;\n    }).catch(error => {\n      return waterData.error = error;\n    });\n  }\n\n};\nexport default helpers;","map":{"version":3,"sources":["/Users/serena.nguyen/Sites-1/GreenbeltNow/src/helpers.js"],"names":["axios","locations","gaugeLocations","helpers","runQuery","locationID","get","params","site","format","parameterCd","siteStatus","getWaterData","locationName","waterData","then","response","status","Error","location","gaugeID","gaugeReference","name","dataPoints","data","value","timeSeries","forEach","dataType","variable","variableDescription","values","includes","discharge","flowCondition","waterLevel","levelCondition","catch","error"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,SAASC,SAAT,EAAoBC,cAApB,QAA0C,cAA1C;AAEA,MAAMC,OAAO,GAAG;AACdC,EAAAA,QAAQ,CAACC,UAAD,EAAa;AACnB,WAAOL,KAAK,CAACM,GAAN,CAAU,yCAAV,EAAqD;AAC1DC,MAAAA,MAAM,EAAE;AACNC,QAAAA,IAAI,EAAEH,UADA;AAENI,QAAAA,MAAM,EAAE,MAFF;AAGNC,QAAAA,WAAW,EAAE,aAHP;AAINC,QAAAA,UAAU,EAAE;AAJN;AADkD,KAArD,CAAP;AAQD,GAVa;;AAWdC,EAAAA,YAAY,CAACC,YAAD,EAAe;AACzB,UAAMR,UAAU,GAAGJ,SAAS,CAACY,YAAD,CAAT,CAAwBR,UAA3C;AACA,UAAMS,SAAS,GAAG,EAAlB;AACA,WAAO,KAAKV,QAAL,CAAcC,UAAd,EACJU,IADI,CACCC,QAAQ,IAAI;AAChB,UAAIA,QAAQ,CAACC,MAAT,KAAoB,GAAxB,EAA6B;AAC3B,cAAM,IAAIC,KAAJ,CAAU,gBAAV,CAAN;AACD;;AACDJ,MAAAA,SAAS,CAACK,QAAV,GAAqBlB,SAAS,CAACY,YAAD,CAA9B,CAJgB,CAMhB;;AACA,YAAMO,OAAO,GAAGlB,cAAc,CAACG,UAAD,CAA9B;AACAS,MAAAA,SAAS,CAACO,cAAV,oEAAqFpB,SAAS,CAACmB,OAAD,CAAT,CAAmBE,IAAxG;AAEA,YAAMC,UAAU,GAAGP,QAAQ,CAACQ,IAAT,CAAcC,KAAd,CAAoBC,UAAvC;AAEAH,MAAAA,UAAU,CAACI,OAAX,CAAmBH,IAAI,IAAI;AACzB,cAAMI,QAAQ,GAAGJ,IAAI,CAACK,QAAL,CAAcC,mBAA/B;AACA,cAAML,KAAK,GAAGD,IAAI,CAACO,MAAL,CAAY,CAAZ,EAAeN,KAAf,CAAqB,CAArB,EAAwBA,KAAtC;;AAEA,YAAIG,QAAQ,CAACI,QAAT,CAAkB,WAAlB,CAAJ,EAAoC;AAClClB,UAAAA,SAAS,CAACmB,SAAV,GAAsBR,KAAtB;;AACA,cAAIA,KAAK,GAAG,GAAZ,EAAiB;AACfX,YAAAA,SAAS,CAACoB,aAAV,GAA0B,+BAA1B;AACD,WAFD,MAEO,IAAIT,KAAK,GAAG,GAAZ,EAAiB;AACtBX,YAAAA,SAAS,CAACoB,aAAV,GACE,8DADF;AAED,WAHM,MAGA;AACLpB,YAAAA,SAAS,CAACoB,aAAV,GAA0B,4BAA1B;AACD;AACF,SAVD,MAUO;AACL;AACApB,UAAAA,SAAS,CAACqB,UAAV,GAAuBV,KAAvB;;AACA,cAAIA,KAAK,GAAG,CAAZ,EAAe;AACbX,YAAAA,SAAS,CAACsB,cAAV,GAA2B,+BAA3B;AACD,WAFD,MAEO,IAAIX,KAAK,GAAG,CAAZ,EAAe;AACpBX,YAAAA,SAAS,CAACsB,cAAV,GAA2B,sCAA3B;AACD,WAFM,MAEA;AACLtB,YAAAA,SAAS,CAACsB,cAAV,GAA2B,sBAA3B;AACD;AACF;AACF,OAzBD;AA0BA,aAAOtB,SAAP;AACD,KAxCI,EAyCJuB,KAzCI,CAyCEC,KAAK,IAAI;AACd,aAAOxB,SAAS,CAACwB,KAAV,GAAkBA,KAAzB;AACD,KA3CI,CAAP;AA4CD;;AA1Da,CAAhB;AA6DA,eAAenC,OAAf","sourcesContent":["import axios from \"axios\";\n\nimport { locations, gaugeLocations } from \"./staticData\";\n\nconst helpers = {\n  runQuery(locationID) {\n    return axios.get(\"https://waterservices.usgs.gov/nwis/iv/\", {\n      params: {\n        site: locationID,\n        format: \"json\",\n        parameterCd: \"00065,00060\",\n        siteStatus: \"active\"\n      }\n    });\n  },\n  getWaterData(locationName) {\n    const locationID = locations[locationName].locationID;\n    const waterData = {};\n    return this.runQuery(locationID)\n      .then(response => {\n        if (response.status !== 200) {\n          throw new Error(\"request failed\");\n        }\n        waterData.location = locations[locationName];\n\n        // gauge reference\n        const gaugeID = gaugeLocations[locationID];\n        waterData.gaugeReference = `Water data is being pulled from the gauge locatated at ${locations[gaugeID].name}.`\n         \n        const dataPoints = response.data.value.timeSeries;\n\n        dataPoints.forEach(data => {\n          const dataType = data.variable.variableDescription;\n          const value = data.values[0].value[0].value;\n\n          if (dataType.includes(\"Discharge\")) {\n            waterData.discharge = value;\n            if (value < 100) {\n              waterData.flowCondition = \"Water flow might be too slow.\";\n            } else if (value > 550) {\n              waterData.flowCondition =\n                \"The water is moving a lil too fast, maybe take a nap instead\";\n            } else {\n              waterData.flowCondition = \"Water flow is pretty good!\";\n            }\n          } else {\n            // we can assume dataType = Gage height, ft\n            waterData.waterLevel = value;\n            if (value < 2) {\n              waterData.levelCondition = \"Water level might be too low.\";\n            } else if (value > 7) {\n              waterData.levelCondition = \"Water level might be too high today.\";\n            } else {\n              waterData.levelCondition = \"Water level is good!\";\n            }\n          }\n        });\n        return waterData;\n      })\n      .catch(error => {\n        return waterData.error = error;\n      });\n  }\n};\n\nexport default helpers;\n"]},"metadata":{},"sourceType":"module"}