{"ast":null,"code":"/*jshint esversion: 6,node: true,-W041: false */\n// weather.js - APIs for openweathermap.org\n(function () {\n  var config = {\n    city: 'Fairplay',\n    units: 'metric',\n    lan: 'it',\n    format: 'json',\n    APPID: null\n  }; // main settings\n\n  var http = require('http');\n\n  var options = {\n    host: 'api.openweathermap.org',\n    path: '/data/2.5/weather?q=fairplay',\n    withCredentials: false\n  };\n  var weather = exports; // weather(set)  --------------------------------------------  weather(set)  ---------------------------------------------\n\n  weather.setLang = function (lang) {\n    config.lan = lang.toLowerCase();\n  };\n\n  weather.setCity = function (city) {\n    config.city = encodeURIComponent(city.toLowerCase());\n  };\n\n  weather.setCoordinate = function (latitude, longitude) {\n    config.latitude = latitude;\n    config.longitude = longitude;\n  };\n\n  weather.setCityId = function (cityid) {\n    config.cityId = cityid;\n  };\n\n  weather.setZipCode = function (zip) {\n    config.zip = zip;\n  };\n\n  weather.setUnits = function (units) {\n    config.units = units.toLowerCase();\n  };\n\n  weather.setAPPID = function (appid) {\n    config.APPID = appid;\n  }; // weather(get)  ---------------------------------------------  weather(get)  ---------------------------------------------\n\n\n  weather.getLang = function () {\n    return config.lan;\n  };\n\n  weather.getCity = function () {\n    return config.city;\n  };\n\n  weather.getCoordinate = function () {\n    return {\n      \"latitude\": config.latitude,\n      \"longitude\": config.longitude\n    };\n  };\n\n  weather.getCityId = function () {\n    return config.cityId;\n  };\n\n  weather.getZipCode = function () {\n    return config.zip;\n  };\n\n  weather.getUnits = function () {\n    return config.units;\n  };\n\n  weather.getFormat = function () {\n    return config.format;\n  };\n\n  weather.getError = function (callback) {\n    getErr(callback);\n  };\n\n  weather.getAPPID = function () {\n    return config.APPID;\n  }; // get temperature\n\n\n  weather.getTemperature = function (callback) {\n    getTemp(callback);\n  }; // get the atmospheric pressure\n\n\n  weather.getPressure = function (callback) {\n    getPres(callback);\n  };\n\n  weather.getHumidity = function (callback) {\n    getHum(callback);\n  };\n\n  weather.getDescription = function (callback) {\n    getDesc(callback);\n  };\n\n  weather.getAllWeather = function (callback) {\n    getData(buildPath(), callback);\n  };\n\n  weather.getWeatherForecast = function (callback) {\n    getData(buildPathForecast(), callback);\n  };\n\n  weather.getWeatherForecastForDays = function (days, callback) {\n    getData(buildPathForecastForDays(days), callback);\n  };\n\n  weather.getWeatherForecastForHours = function (hours, callback) {\n    getData(buildPathForecastForHours(hours), callback);\n  };\n\n  weather.getSmartJSON = function (callback) {\n    getSmart(callback);\n  }; // active functions()  -------------------------------------  active functions()  --------------------------------------------\n\n\n  function getErr(callback) {\n    // set new path to throw the http exception\n    options.path = 'timetocrash';\n    http.get(options, function (err, data) {\n      return callback(err, data);\n    });\n  }\n\n  function getPres(callback) {\n    getData(buildPath(), function (err, jsonObj) {\n      return callback(err, jsonObj.main.pressure);\n    });\n  }\n\n  function getTemp(callback) {\n    getData(buildPath(), function (err, jsonObj) {\n      return callback(err, jsonObj.main.temp);\n    });\n  }\n\n  function getHum(callback) {\n    getData(buildPath(), function (err, jsonObj) {\n      return callback(err, jsonObj.main.humidity);\n    });\n  }\n\n  function getDesc(callback) {\n    getData(buildPath(), function (err, jsonObj) {\n      return callback(err, jsonObj.weather[0].description);\n    });\n  }\n\n  function getSmart(callback) {\n    getData(buildPath(), function (err, jsonObj) {\n      var smartJSON = {};\n      smartJSON.temp = jsonObj.main.temp;\n      smartJSON.humidity = jsonObj.main.humidity;\n      smartJSON.pressure = jsonObj.main.pressure;\n      smartJSON.description = jsonObj.weather[0].description;\n      smartJSON.weathercode = jsonObj.weather[0].id; // return the rain in mm if present \n\n      if (jsonObj.precipitation) {\n        smartJSON.rain = jsonObj.precipitation.value;\n      } else {\n        smartJSON.rain = 0;\n      }\n\n      if (jsonObj.rain) {\n        var rain3h = jsonObj.rain;\n        smartJSON.rain = Math.round(rain3h['3h'] / 3);\n      }\n\n      return callback(err, smartJSON);\n    });\n  }\n\n  function getCoordinate() {\n    var coordinateAvailable = config.latitude && config.longitude;\n    var cityIdAvailable = config.cityId;\n    var coordinateQuery = 'q=' + config.city;\n    if (cityIdAvailable) coordinateQuery = 'id=' + config.cityId;\n    if (config.zip) coordinateQuery = 'zip=' + config.zip;else if (coordinateAvailable) coordinateQuery = 'lat=' + config.latitude + '&lon=' + config.longitude;\n    return coordinateQuery;\n  }\n\n  function buildPath() {\n    return '/data/2.5/weather?' + getCoordinate() + '&units=' + config.units + '&lang=' + config.lan + '&mode=json&APPID=' + config.APPID;\n  }\n\n  function buildPathForecast() {\n    return '/data/2.5/forecast?' + getCoordinate() + '&units=' + config.units + '&lang=' + config.lan + '&mode=json&APPID=' + config.APPID;\n  }\n\n  function buildPathForecastForDays(days) {\n    return '/data/2.5/forecast/daily?' + getCoordinate() + '&cnt=' + days + '&units=' + config.units + '&lang=' + config.lan + '&mode=json&APPID=' + config.APPID;\n  }\n\n  function buildPathForecastForHours(hours) {\n    return '/data/2.5/forecast/hour?' + getCoordinate() + '&cnt=' + hours + '&units=' + config.units + '&lang=' + config.lan + '&mode=json&APPID=' + config.APPID;\n  }\n\n  function getData(url, callback, tries) {\n    options.path = url;\n    var conn = http.get(options, function (res) {\n      var chunks = '';\n      res.on('data', function (chunk) {\n        chunks += chunk;\n      });\n      res.on('end', function () {\n        var parsed = {};\n\n        if (!chunks && (!tries || tries < 3)) {\n          return getData(url, callback, (tries || 0) + 1);\n        } // Try-Catch added by Mikael Aspehed\n\n\n        try {\n          parsed = JSON.parse(chunks);\n        } catch (e) {\n          parsed = {\n            error: e\n          };\n        }\n\n        return callback(null, parsed);\n      });\n      res.on('error', function (err) {\n        return callback(err, null);\n      });\n    });\n    conn.on('error', function (err) {\n      return callback(err, null);\n    });\n  }\n})();","map":null,"metadata":{},"sourceType":"script"}