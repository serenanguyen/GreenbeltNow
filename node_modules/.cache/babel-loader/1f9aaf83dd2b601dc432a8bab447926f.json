{"ast":null,"code":"import _slicedToArray from \"/Users/serena.nguyen/Sites-1/GreenbeltNow/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/serena.nguyen/Sites-1/GreenbeltNow/src/components/Dropdown.js\";\nimport React, { useContext, useState } from \"react\";\nimport { locations } from \"../staticData\";\nimport helpers from \"../helpers\";\nimport { ResultsContext, LocationContext, LoadingContext } from \"../Store\";\n\nconst Dropdown = () => {\n  const setIsLoading = useContext(LoadingContext).setState;\n\n  const _useContext = useContext(LocationContext),\n        selectedLocation = _useContext.state,\n        setLocation = _useContext.setState;\n\n  const setResults = useContext(ResultsContext).setState;\n\n  const _useState = useState(false),\n        _useState2 = _slicedToArray(_useState, 2),\n        isOpen = _useState2[0],\n        setIsOpen = _useState2[1];\n\n  const renderLocations = () => {\n    const locationKeys = Object.keys(locations);\n    return locationKeys // do not display selected location\n    .filter(location => location !== selectedLocation).map((location, i) => {\n      return React.createElement(\"li\", {\n        key: i,\n        className: \"item\",\n        \"data-id\": location,\n        onClick: handleSelect,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 27\n        },\n        __self: this\n      }, locations[location].name);\n    });\n  };\n\n  const handleSelect = e => {\n    const locationID = e.currentTarget.dataset.id; // run getWaterData if new location is selected\n\n    if (selectedLocation !== locations[locationID]) {\n      setLocation(locationID);\n      setIsLoading(true);\n      helpers.getWaterData(locationID).then(response => {\n        setIsLoading(false);\n        setResults(response);\n      }).catch(error => {\n        setIsLoading(false);\n        setResults({\n          error\n        });\n      });\n    }\n  };\n\n  const toggleDropdown = () => {\n    setIsOpen(!isOpen);\n  };\n\n  let dropdownClass = \"dropdown\";\n\n  if (isOpen) {\n    dropdownClass += \" active\";\n  }\n\n  const title = locations[selectedLocation] && locations[selectedLocation].name || \"Select Location\";\n  return React.createElement(\"div\", {\n    className: dropdownClass,\n    onClick: toggleDropdown,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"title\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75\n    },\n    __self: this\n  }, title), React.createElement(\"ul\", {\n    className: \"list\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76\n    },\n    __self: this\n  }, renderLocations()));\n};\n\nexport default Dropdown;","map":{"version":3,"sources":["/Users/serena.nguyen/Sites-1/GreenbeltNow/src/components/Dropdown.js"],"names":["React","useContext","useState","locations","helpers","ResultsContext","LocationContext","LoadingContext","Dropdown","setIsLoading","setState","selectedLocation","state","setLocation","setResults","isOpen","setIsOpen","renderLocations","locationKeys","Object","keys","filter","location","map","i","handleSelect","name","e","locationID","currentTarget","dataset","id","getWaterData","then","response","catch","error","toggleDropdown","dropdownClass","title"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,UAAhB,EAA4BC,QAA5B,QAA4C,OAA5C;AAEA,SAASC,SAAT,QAA0B,eAA1B;AAEA,OAAOC,OAAP,MAAoB,YAApB;AAEA,SAASC,cAAT,EAAyBC,eAAzB,EAA0CC,cAA1C,QAAgE,UAAhE;;AAEA,MAAMC,QAAQ,GAAG,MAAM;AACrB,QAAMC,YAAY,GAAGR,UAAU,CAACM,cAAD,CAAV,CAA2BG,QAAhD;;AADqB,sBAEsCT,UAAU,CACnEK,eADmE,CAFhD;AAAA,QAENK,gBAFM,eAEbC,KAFa;AAAA,QAEsBC,WAFtB,eAEYH,QAFZ;;AAKrB,QAAMI,UAAU,GAAGb,UAAU,CAACI,cAAD,CAAV,CAA2BK,QAA9C;;AALqB,oBAOOR,QAAQ,CAAC,KAAD,CAPf;AAAA;AAAA,QAOda,MAPc;AAAA,QAONC,SAPM;;AASrB,QAAMC,eAAe,GAAG,MAAM;AAC5B,UAAMC,YAAY,GAAGC,MAAM,CAACC,IAAP,CAAYjB,SAAZ,CAArB;AAEA,WACEe,YAAY,CACV;AADU,KAETG,MAFH,CAEUC,QAAQ,IAAIA,QAAQ,KAAKX,gBAFnC,EAGGY,GAHH,CAGO,CAACD,QAAD,EAAWE,CAAX,KAAiB;AACpB,aACE;AACE,QAAA,GAAG,EAAEA,CADP;AAEE,QAAA,SAAS,EAAC,MAFZ;AAGE,mBAASF,QAHX;AAIE,QAAA,OAAO,EAAEG,YAJX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAMGtB,SAAS,CAACmB,QAAD,CAAT,CAAoBI,IANvB,CADF;AAUD,KAdH,CADF;AAiBD,GApBD;;AAsBA,QAAMD,YAAY,GAAGE,CAAC,IAAI;AACxB,UAAMC,UAAU,GAAGD,CAAC,CAACE,aAAF,CAAgBC,OAAhB,CAAwBC,EAA3C,CADwB,CAExB;;AACA,QAAIpB,gBAAgB,KAAKR,SAAS,CAACyB,UAAD,CAAlC,EAAgD;AAC9Cf,MAAAA,WAAW,CAACe,UAAD,CAAX;AACAnB,MAAAA,YAAY,CAAC,IAAD,CAAZ;AACAL,MAAAA,OAAO,CACJ4B,YADH,CACgBJ,UADhB,EAEGK,IAFH,CAEQC,QAAQ,IAAI;AAChBzB,QAAAA,YAAY,CAAC,KAAD,CAAZ;AACAK,QAAAA,UAAU,CAACoB,QAAD,CAAV;AACD,OALH,EAMGC,KANH,CAMSC,KAAK,IAAI;AACd3B,QAAAA,YAAY,CAAC,KAAD,CAAZ;AACAK,QAAAA,UAAU,CAAC;AAAEsB,UAAAA;AAAF,SAAD,CAAV;AACD,OATH;AAUD;AACF,GAjBD;;AAmBA,QAAMC,cAAc,GAAG,MAAM;AAC3BrB,IAAAA,SAAS,CAAC,CAACD,MAAF,CAAT;AACD,GAFD;;AAIA,MAAIuB,aAAa,GAAG,UAApB;;AAEA,MAAIvB,MAAJ,EAAY;AACVuB,IAAAA,aAAa,IAAI,SAAjB;AACD;;AAED,QAAMC,KAAK,GACRpC,SAAS,CAACQ,gBAAD,CAAT,IAA+BR,SAAS,CAACQ,gBAAD,CAAT,CAA4Be,IAA5D,IACA,iBAFF;AAIA,SACE;AAAK,IAAA,SAAS,EAAEY,aAAhB;AAA+B,IAAA,OAAO,EAAED,cAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAK,IAAA,SAAS,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAwBE,KAAxB,CADF,EAEE;AAAI,IAAA,SAAS,EAAC,MAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAsBtB,eAAe,EAArC,CAFF,CADF;AAMD,CAtED;;AAwEA,eAAeT,QAAf","sourcesContent":["import React, { useContext, useState } from \"react\";\n\nimport { locations } from \"../staticData\";\n\nimport helpers from \"../helpers\";\n\nimport { ResultsContext, LocationContext, LoadingContext } from \"../Store\";\n\nconst Dropdown = () => {\n  const setIsLoading = useContext(LoadingContext).setState;\n  const { state: selectedLocation, setState: setLocation } = useContext(\n    LocationContext\n  );\n  const setResults = useContext(ResultsContext).setState;\n\n  const [isOpen, setIsOpen] = useState(false);\n\n  const renderLocations = () => {\n    const locationKeys = Object.keys(locations);\n\n    return (\n      locationKeys\n        // do not display selected location\n        .filter(location => location !== selectedLocation)\n        .map((location, i) => {\n          return (\n            <li\n              key={i}\n              className=\"item\"\n              data-id={location}\n              onClick={handleSelect}\n            >\n              {locations[location].name}\n            </li>\n          );\n        })\n    );\n  };\n\n  const handleSelect = e => {\n    const locationID = e.currentTarget.dataset.id;\n    // run getWaterData if new location is selected\n    if (selectedLocation !== locations[locationID]) {\n      setLocation(locationID);\n      setIsLoading(true);\n      helpers\n        .getWaterData(locationID)\n        .then(response => {\n          setIsLoading(false);\n          setResults(response);\n        })\n        .catch(error => {\n          setIsLoading(false);\n          setResults({ error });\n        });\n    }\n  };\n\n  const toggleDropdown = () => {\n    setIsOpen(!isOpen);\n  };\n\n  let dropdownClass = \"dropdown\";\n\n  if (isOpen) {\n    dropdownClass += \" active\";\n  }\n\n  const title =\n    (locations[selectedLocation] && locations[selectedLocation].name) ||\n    \"Select Location\";\n\n  return (\n    <div className={dropdownClass} onClick={toggleDropdown}>\n      <div className=\"title\">{title}</div>\n      <ul className=\"list\">{renderLocations()}</ul>\n    </div>\n  );\n};\n\nexport default Dropdown;"]},"metadata":{},"sourceType":"module"}